#Include necessary packages

#Tool imports
import numpy as np
import pandas as pd
import networkx as nx

#Graphic imports
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib import rcParams

#Store weights of each layer after every fifth epoch]

weights = [[0.85808367, 0.45937046,0.08260015, 0.9040238, -0.95295024, 0.35621813, -0.042709228, -0.02734862,0.04334547,
  0.8150574, 0.4809214,-0.402812,0.54578173,-0.2073698,-0.573715,-0.063258335,-0.21993314,0.017644309,-0.039308988,-0.04421537,-0.023183372,-0.5526816,-0.9780174,0.50751626,0.04082411],
 [1.0502985,0.42921185,-0.05450929,1.0385101,-1.2029564,0.2093722,-0.13288754,-0.028036058,0.11100656,1.0308278,0.68939465,-0.402812,0.79320145,
  0.01086448,-0.573715,-0.008571448,-0.113044515,-0.011548573,-0.13268574,-0.099777415,-0.052386742, -0.8225536,-1.2367061,0.47846913,0.19950618],
 [1.2089489,0.33119905,0.0035365378,1.0792937,-1.5129578,0.1951394,-0.23979129,-0.009805852,0.20353527,1.2205637,0.86441016, -0.402812,
  1.0468783, 0.36728594,-0.573715,-0.15368964,-0.14936459,-0.012593612,-0.24577247,-0.108590275,-0.053432155,-1.1009829,-1.5314242,0.47742942,0.3818658],
 [1.3388219, 0.14132886,0.20602547,1.1744447,-1.7141999,0.21414135,-0.25615323,-0.09744898,0.33113256,1.4324522,1.0195931,-0.402812,1.1801176,0.5880747,-0.573715,-0.26393896,-0.2795176,-0.012627737,-0.32640713,-0.17495668,-0.053466298,
  -1.3242612,-1.8679138,0.4773954,0.5910339],
 [1.466426,-0.0727981,0.38164926,1.2334876,-1.8721666,0.20419511,-0.25493237,-0.12662186,0.41191307,1.6004741,1.1437931,-0.402812,
 1.2812483,0.77037805,-0.573715,-0.3729431,-0.3777931,-0.012628761,-0.3740146,-0.19182852,-0.053467315,-1.5056382,-2.1582084,0.47739446,
  0.78422624],[1.5989377,-0.29161558,0.5003774,1.2660223,-1.9635806,0.083369374,-0.22339731,-0.09048826,0.5046492,1.7374136,1.2513783,-0.402812,
  1.3508567,0.8910946,-0.573715,-0.47961137,-0.47821343,-0.012628789,-0.39017034,-0.18731901,-0.053467333,-1.646267,-2.3920977,0.47739446,0.96046525],
 [1.7072634,-0.4007249,0.60486495,1.2610831,-2.0154269,0.017161908,-0.21249804,-0.061172243,0.5926572,1.8219602,1.3308953,-0.402812,1.4059248,0.96281934,
  -0.573715,-0.5934336,-0.5838576,-0.012628789,-0.41495275,-0.20887068,-0.053467333,-1.7591503,-2.5820756,0.47739446,1.1300304],
 [1.7945913,-0.4200341,0.6895452,1.2638679,-2.0704515,-0.04050499,-0.19088319,-0.03303934,0.6487306,1.9010203,1.395412,-0.402812,1.4426005,1.02702,-0.573715,
  -0.67668855,-0.6560315,-0.012628789,-0.43881997,-0.22676116,-0.053467333,-1.8573753,-2.7466736,0.47739446,1.2737103],
 [1.8491809,-0.42215738,0.7568486,1.2840421,-2.1205716,-0.10478807,-0.1736482,0.0034558708,0.6799796,1.9649882,1.4550396,-0.402812,1.4737836,1.0802283,-0.573715,-0.7392627,
  -0.6993919,-0.012628789,-0.4532768,-0.23518728,-0.053467333,-1.940504,-2.8866637,0.47739446,1.3942262],
 [1.8777071,-0.405951,0.7998003,1.3162222,-2.1552045,-0.184149,-0.15553592,0.016102402,0.72174954,2.0183897,1.5039481,
  -0.402812,1.4907129,1.1125848,-0.573715,-0.8024745,-0.74819493,-0.012628789,-0.46880946,-0.25214186,-0.053467333, -2.0125225,
  -3.0078616,0.47739446,1.4976064],
 [1.9118153,-0.38586995,0.85209304,1.3172237,-2.2161915,-0.19992222,-0.15745783,0.05915092,0.7436487,2.045099,1.5363508,-0.402812,1.5343591,
  1.163521,-0.573715,-0.84670544,-0.7796922,-0.012628789,-0.47946298,-0.26190403,-0.053467333,-2.07734,-3.1154351,0.47739446,1.5732013],
 [1.9327749,-0.3629724,0.8851605,1.32651,-2.2586713,-0.23001064,-0.15720515,0.08225736,0.7751162,2.074135, 1.561188,-0.402812,
  1.5666482,1.1955158,-0.573715,-0.8871596,-0.8212774,-0.012628789,-0.48489103,-0.2824555,-0.053467333,-2.1348832,-3.2124596,0.47739446,1.6411881],
 [1.945768,-0.3382109,0.91022253,1.341928,-2.2957828,-0.26421884,-0.15313578,0.0994578,0.7995275,2.1002207,1.5856147,
  -0.402812,1.5846227,1.2322866,-0.573715,-0.93200505,-0.84581697,-0.012628789,-0.49452463,-0.2932571,-0.053467333,-2.1854367,
  -3.2982519,0.47739446,1.6903123],
 [1.9673451,-0.31758222,0.9370436,1.3589973,-2.3218844,-0.30555886,-0.14075689, 0.1113173,0.81741977,2.1329112,1.6185013,
  -0.402812, 1.5969398,1.2576567,-0.573715,-0.9707493,-0.8683951,-0.012628789,-0.50114304,-0.30193004,-0.053467333,-2.2346146,
  -3.3816042,0.47739446,1.7391403],
 [1.9821819,-0.30215043,0.9625859,1.3673093,-2.3555872,-0.32528448,-0.13875422,0.13476275,0.82967746,2.1443746,1.6465917,
  -0.402812,1.6282281,1.282173,-0.573715,-0.999811,-0.88426584, -0.012628789,-0.5045942,-0.30724838,-0.053467333,-2.2759838,-3.4525099,0.47739446,1.7781137],
 [2.000343,-0.28274232, 0.9781989,1.3718615, -2.3768857, -0.3436956, -0.13593064,0.14300334, 0.84814054,2.1526566,1.6757784,-0.402812, 1.6381861,
  1.3028339,-0.573715,-1.0441478,-0.8912227,-0.012628789, -0.5179216,-0.3127276,-0.053467333,-2.3121433, -3.5145106,0.47739446,
  1.8094155],[2.014814,-0.26872158, 0.99684,1.37788,-2.4001482,-0.35851645,-0.13530704,0.15726842,0.86021566, 2.163678,
  1.6997569,-0.402812,1.668894, 1.3106526,-0.573715,-1.0598857, -0.91192,-0.012628789,-0.5163336,-0.3242764,-0.053467333,-2.345667,
  -3.572196,0.47739446,1.8320975],[2.0247312,-0.25517803,1.0140612, 1.387016,-2.417665,-0.37894097,-0.1334876,0.16431816,
  0.87592363,2.1724617,1.7232615,-0.402812,1.6871586,1.3193893, -0.573715,-1.0882801,-0.928537,-0.012628789,-0.5194945,-0.3344546,
  -0.053467333,-2.377477,-3.6266594,0.47739446, 1.8580866],[2.0443568,-0.2514645,1.0292182,1.3902507,-2.432108,-0.38889587,-0.12925164,
  0.17557499,0.87989223,2.1968946,1.7379718,-0.402812, 1.6921351, 1.3398069, -0.573715,-1.1018761,-0.93565893, -0.012628789,-0.5178998,-0.3391287,-0.053467333,-2.4036264,
  -3.6714613,0.47739446,1.8803074],
 [2.0629044,-0.25298402,1.0494851,1.3947111,-2.437481,-0.40825677,-0.12429371,0.17872451,0.8916656, 2.2149143,1.7578883,-0.402812, 1.6930287,
  1.3484513,-0.573715,-1.1276938,-0.9499553,-0.012628789,-0.5220483,-0.34500343,-0.053467333, -2.4305182,-3.7171147,0.47739446,
  1.8927381]]


#print(weights)
layers = [2, 3, 3, 1] #Layers in our neural network


nodes = {'ip1': (10, 40), 'ip2':(10, 60), 'b1': (10, 5), 'a1': (20, 32), 'a2': (20, 52), 'a3': (20, 72),
         'b2':(20, 5), 'a4': (30, 32), 'a5': (30, 52), 'a6': (30, 72), 'b3': (30, 5), 'op': (35, 52)}

G = nx.MultiGraph() #MUltigraph object

G.add_nodes_from(nodes.keys(), color='r') #Add the nodes

#Include the positions
for n, p in nodes.items():
    G.nodes[n]['pos'] = p

#Connect the egdes with thier respective nodes
G.add_edge('ip1', 'a1', color='r', weight = 2)
G.add_edge('ip1', 'a2', color='r',  weight = 2)
G.add_edge('ip1', 'a3', color='r',  weight = 4)
G.add_edge('ip2', 'a1', color='r',  weight = 4)
G.add_edge('ip2', 'a2', color='r',  weight = 6)
G.add_edge('ip2', 'a3', color='r',  weight = 6)
G.add_edge('b1', 'a1', color='r', weight = 2)
G.add_edge('b1', 'a2', color='r',  weight = 2)
G.add_edge('b1', 'a3', color='r',  weight = 4)
G.add_edge('a1', 'a4', color='r',  weight = 4)
G.add_edge('a1', 'a5', color='r',  weight = 6)
G.add_edge('a1', 'a6', color='r',  weight = 6)
G.add_edge('a2', 'a4', color='r', weight = 2)
G.add_edge('a2', 'a5', color='r',  weight = 2)
G.add_edge('a2', 'a6', color='r',  weight = 4)
G.add_edge('a3', 'a4', color='r',  weight = 4)
G.add_edge('a3', 'a5', color='r',  weight = 6)
G.add_edge('a3', 'a6', color='r',  weight = 6)
G.add_edge('b2', 'a4', color='r', weight = 2)
G.add_edge('b2', 'a5', color='r',  weight = 2)
G.add_edge('b2', 'a6', color='r',  weight = 4)
G.add_edge('a4', 'op', color='r',  weight = 4)
G.add_edge('a5', 'op', color='r',  weight = 6)
G.add_edge('a6', 'op', color='r',  weight = 6)
G.add_edge('b3', 'op', color='r',  weight = 6)


def color_mapper_node(x):
 c_map = []
 for i in x:
  if i == 'b1' or  i == 'b2' or i == 'b3':
   c_map.append('red')
  elif i == 'ip1' or  i == 'ip2':
   c_map.append('pink')
  elif i == 'op':
   c_map.append('yellow')
  else:
   c_map.append('blue')
 return c_map


def color_mapper_edge(x):
 edge_map = []
 for i in x:
  i = np.abs(i)
  if i >= 0.70:
   edge_map.append('#00ff11')
  elif i >= 0.5 and i < 0.75:
   edge_map.append('#7cfc84')
  elif i >= 0.25 and i < 0.5:
   edge_map.append('#b0ffb5')
  else:
   edge_map.append('#d2fad4')
 return edge_map


def status_edge():
 for w in weights:
  yield color_mapper_edge(w)

edge_map = status_edge()


def draw_next_status(n):
 plt.cla()
 e_map = next(edge_map)
 nx.draw(G, nodes, node_color=color_mapper_node(nodes.keys()), edge_color=e_map, width=4, with_labels=True)


# Set up formatting for the movie files


ani = animation.FuncAnimation(plt.gcf(), draw_next_status, interval=1000, frames=20, repeat= False)
plt.title = "Neural Network Training"
plt.show()

writer = animation.PillowWriter(fps = 2)
ani.save('C:/Users/Anah Veronica/OneDrive/Documents/neuralnetwork_animate.gif', writer=writer)




